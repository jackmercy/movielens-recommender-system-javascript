{"version":3,"sources":["../src/index.js"],"names":["addUserRating","sliceAndDice","softEval","MOVIES_META_DATA","MOVIES_KEYWORDS","RATINGS","ME_USER_ID","moviesMetaDataPromise","Promise","resolve","createReadStream","pipe","headers","on","fromMetaDataFile","moviesKeywordsPromise","fromKeywordsFile","ratingsPromise","fromRatingsFile","row","id","adult","budget","genres","homepage","language","original_language","title","original_title","overview","popularity","studio","production_companies","release","release_date","revenue","runtime","voteAverage","vote_average","voteCount","vote_count","keywords","push","console","log","all","then","init","moviesMetaData","moviesKeywords","ratings","MOVIES_BY_ID","MOVIES_IN_LIST","X","ME_USER_RATINGS","ratingsGroupedByUser","ratingsGroupedByMovie","meUserRatings","linearRegressionBasedRecommendation","contentBasedRecommendation","cfUserBasedRecommendation","cfItemBasedRecommendation","userId","searchTitle","rating","movieId","recommendations","count","onlyTitle","filter","recommendation","map","mr","score","movie","slice","string","escape","eval","e"],"mappings":"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","file":"index.js","sourcesContent":["// https://www.kaggle.com/rounakbanik/the-movies-dataset/data\r\n// Exercise: Content-based - Include credits data with crew and cast too\r\n// Exercise: Content-based - Make features weighted based on popularity or actors\r\n// Exercise: Collaborative Filtering - Model-based CF with SVD\r\n\r\nimport fs from 'fs';\r\nimport csv from 'fast-csv';\r\n\r\nimport prepareRatings from './preparation/ratings';\r\nimport prepareMovies from './preparation/movies';\r\nimport predictWithLinearRegression from './strategies/linearRegression';\r\nimport predictWithContentBased from './strategies/contentBased';\r\nimport { predictWithCfUserBased, predictWithCfItemBased } from './strategies/collaborativeFiltering';\r\nimport { getMovieIndexByTitle } from './strategies/common';\r\n\r\nlet MOVIES_META_DATA = {};\r\nlet MOVIES_KEYWORDS = {};\r\nlet RATINGS = [];\r\n\r\nlet ME_USER_ID = 0;\r\n\r\nlet moviesMetaDataPromise = new Promise((resolve) =>\r\n  fs\r\n    .createReadStream('./data/movies_metadata.csv')\r\n    .pipe(csv({ headers: true }))\r\n    .on('data', fromMetaDataFile)\r\n    .on('end', () => resolve(MOVIES_META_DATA)));\r\n\r\nlet moviesKeywordsPromise = new Promise((resolve) =>\r\n  fs\r\n    .createReadStream('./data/keywords.csv')\r\n    .pipe(csv({ headers: true }))\r\n    .on('data', fromKeywordsFile)\r\n    .on('end', () => resolve(MOVIES_KEYWORDS)));\r\n\r\nlet ratingsPromise = new Promise((resolve) =>\r\n  fs\r\n    .createReadStream('./data/ratings_small.csv')\r\n    .pipe(csv({ headers: true }))\r\n    .on('data', fromRatingsFile)\r\n    .on('end', () => resolve(RATINGS)));\r\n\r\nfunction fromMetaDataFile(row) {\r\n  MOVIES_META_DATA[row.id] = {\r\n    id: row.id,\r\n    adult: row.adult,\r\n    budget: row.budget,\r\n    genres: softEval(row.genres, []),\r\n    homepage: row.homepage,\r\n    language: row.original_language,\r\n    title: row.original_title,\r\n    overview: row.overview,\r\n    popularity: row.popularity,\r\n    studio: softEval(row.production_companies, []),\r\n    release: row.release_date,\r\n    revenue: row.revenue,\r\n    runtime: row.runtime,\r\n    voteAverage: row.vote_average,\r\n    voteCount: row.vote_count,\r\n  };\r\n}\r\n\r\nfunction fromKeywordsFile(row) {\r\n  MOVIES_KEYWORDS[row.id] = {\r\n    keywords: softEval(row.keywords, []),\r\n  };\r\n}\r\n\r\nfunction fromRatingsFile(row) {\r\n  RATINGS.push(row);\r\n}\r\n\r\nconsole.log('Unloading data from files ... \\n');\r\n\r\nPromise.all([\r\n  moviesMetaDataPromise,\r\n  moviesKeywordsPromise,\r\n  ratingsPromise,\r\n]).then(init);\r\n\r\nfunction init([ moviesMetaData, moviesKeywords, ratings ]) {\r\n  /* ------------ */\r\n  //  Preparation //\r\n  /* -------------*/\r\n\r\n  const {\r\n    MOVIES_BY_ID,\r\n    MOVIES_IN_LIST,\r\n    X,\r\n  } = prepareMovies(moviesMetaData, moviesKeywords);\r\n\r\n  let ME_USER_RATINGS = [\r\n    addUserRating(ME_USER_ID, 'Doctor Strange', '5.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Thor', '4.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Back to the Future Part II', '3.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Jurassic Park', '4.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Reservoir Dogs', '1.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Men in Black II', '3.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Captain America: The First Avenger', '5.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Sissi', '1.0', MOVIES_IN_LIST),\r\n    addUserRating(ME_USER_ID, 'Titanic', '1.0', MOVIES_IN_LIST),\r\n  ];\r\n\r\n  const {\r\n    ratingsGroupedByUser,\r\n    ratingsGroupedByMovie,\r\n  } = prepareRatings([ ...ME_USER_RATINGS, ...ratings ]);\r\n\r\n  /* ----------------------------- */\r\n  //  Linear Regression Prediction //\r\n  //        Gradient Descent       //\r\n  /* ----------------------------- */\r\n\r\n  console.log('\\n');\r\n  console.log('(A) Linear Regression Prediction ... \\n');\r\n\r\n  console.log('(1) Training \\n');\r\n  const meUserRatings = ratingsGroupedByUser[ME_USER_ID];\r\n  const linearRegressionBasedRecommendation = predictWithLinearRegression(X, MOVIES_IN_LIST, meUserRatings);\r\n\r\n  console.log('(2) Prediction \\n');\r\n  console.log(sliceAndDice(linearRegressionBasedRecommendation, MOVIES_BY_ID, 10, true));\r\n\r\n  /* ------------------------- */\r\n  //  Content-Based Prediction //\r\n  //  Cosine Similarity Matrix //\r\n  /* ------------------------- */\r\n\r\n  console.log('\\n');\r\n  console.log('(B) Content-Based Prediction ... \\n');\r\n\r\n  console.log('(1) Computing Cosine Similarity \\n');\r\n  const title = 'Batman Begins';\r\n  const contentBasedRecommendation = predictWithContentBased(X, MOVIES_IN_LIST, title);\r\n\r\n  console.log(`(2) Prediction based on \"${title}\" \\n`);\r\n  console.log(sliceAndDice(contentBasedRecommendation, MOVIES_BY_ID, 10, true));\r\n\r\n  /* ----------------------------------- */\r\n  //  Collaborative-Filtering Prediction //\r\n  //             User-Based              //\r\n  /* ----------------------------------- */\r\n\r\n  console.log('\\n');\r\n  console.log('(C) Collaborative-Filtering (User-Based) Prediction ... \\n');\r\n\r\n  console.log('(1) Computing User-Based Cosine Similarity \\n');\r\n\r\n  const cfUserBasedRecommendation = predictWithCfUserBased(\r\n    ratingsGroupedByUser,\r\n    ratingsGroupedByMovie,\r\n    ME_USER_ID\r\n  );\r\n\r\n  console.log('(2) Prediction \\n');\r\n  console.log(sliceAndDice(cfUserBasedRecommendation, MOVIES_BY_ID, 10, true));\r\n\r\n  /* ----------------------------------- */\r\n  //  Collaborative-Filtering Prediction //\r\n  //             Item-Based              //\r\n  /* ----------------------------------- */\r\n\r\n  console.log('\\n');\r\n  console.log('(C) Collaborative-Filtering (Item-Based) Prediction ... \\n');\r\n\r\n  console.log('(1) Computing Item-Based Cosine Similarity \\n');\r\n\r\n  const cfItemBasedRecommendation = predictWithCfItemBased(\r\n    ratingsGroupedByUser,\r\n    ratingsGroupedByMovie,\r\n    ME_USER_ID\r\n  );\r\n\r\n  console.log('(2) Prediction \\n');\r\n  console.log(sliceAndDice(cfItemBasedRecommendation, MOVIES_BY_ID, 10, true));\r\n\r\n  console.log('\\n');\r\n  console.log('End ...');\r\n}\r\n\r\n// Utility\r\n\r\nexport function addUserRating(userId, searchTitle, rating, MOVIES_IN_LIST) {\r\n  const { id, title } = getMovieIndexByTitle(MOVIES_IN_LIST, searchTitle);\r\n\r\n  return {\r\n    userId,\r\n    rating,\r\n    movieId: id,\r\n    title,\r\n  };\r\n}\r\n\r\nexport function sliceAndDice(recommendations, MOVIES_BY_ID, count, onlyTitle) {\r\n  recommendations = recommendations.filter(recommendation => MOVIES_BY_ID[recommendation.movieId]);\r\n\r\n  recommendations = onlyTitle\r\n    ? recommendations.map(mr => ({ title: MOVIES_BY_ID[mr.movieId].title, score: mr.score }))\r\n    : recommendations.map(mr => ({ movie: MOVIES_BY_ID[mr.movieId], score: mr.score }));\r\n\r\n  return recommendations\r\n    .slice(0, count);\r\n}\r\n\r\nexport function softEval(string, escape) {\r\n  if (!string) {\r\n    return escape;\r\n  }\r\n\r\n  try {\r\n    return eval(string);\r\n  } catch (e) {\r\n    return escape;\r\n  }\r\n}"]}