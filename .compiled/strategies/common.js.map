{"version":3,"sources":["../../src/strategies/common.js"],"names":["sortByScore","getCosineSimilarityRowVector","getMovieIndexByTitle","recommendation","sort","a","b","score","matrix","index","map","rowRelative","i","MOVIES_IN_LIST","query","movie","title","indexOf","Error","id"],"mappings":";;;;;QAEgBA,W,GAAAA,W;QAQAC,4B,GAAAA,4B;QAMAC,oB,GAAAA,oB;;AAhBhB;;;;;;AAEO,SAASF,WAAT,CAAqBG,cAArB,EAAqC;AAC1C,SAAOA,eAAeC,IAAf,CAAoB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,EAAEC,KAAF,GAAUF,EAAEE,KAAtB;AAAA,GAApB,CAAP;AACD;;AAED;AACA;AACA;AACA;AACO,SAASN,4BAAT,CAAsCO,MAAtC,EAA8CC,KAA9C,EAAqD;AAC1D,SAAOD,OAAOE,GAAP,CAAW,UAACC,WAAD,EAAcC,CAAd,EAAoB;AACpC,WAAO,uCAAWJ,OAAOC,KAAP,CAAX,EAA0BD,OAAOI,CAAP,CAA1B,CAAP;AACD,GAFM,CAAP;AAGD;;AAEM,SAASV,oBAAT,CAA8BW,cAA9B,EAA8CC,KAA9C,EAAqD;AAC1D,MAAML,QAAQI,eAAeH,GAAf,CAAmB;AAAA,WAASK,MAAMC,KAAf;AAAA,GAAnB,EAAyCC,OAAzC,CAAiDH,KAAjD,CAAd;;AAEA,MAAI,CAACL,KAAL,EAAY;AACV,UAAM,IAAIS,KAAJ,CAAU,iBAAV,CAAN;AACD;;AALyD,8BAOpCL,eAAeJ,KAAf,CAPoC;AAAA,MAOlDO,KAPkD,yBAOlDA,KAPkD;AAAA,MAO3CG,EAP2C,yBAO3CA,EAP2C;;AAQ1D,SAAO,EAAEV,YAAF,EAASO,YAAT,EAAgBG,MAAhB,EAAP;AACD","file":"common.js","sourcesContent":["import similarity from 'compute-cosine-similarity';\r\n\r\nexport function sortByScore(recommendation) {\r\n  return recommendation.sort((a, b) => b.score - a.score);\r\n}\r\n\r\n// X x 1 row vector based on similarities of movies\r\n// 1 equals similar, -1 equals not similar, 0 equals orthogonal\r\n// Whole matrix is too computational expensive for 45.000 movies\r\n// https://en.wikipedia.org/wiki/Cosine_similarity\r\nexport function getCosineSimilarityRowVector(matrix, index) {\r\n  return matrix.map((rowRelative, i) => {\r\n    return similarity(matrix[index], matrix[i]);\r\n  });\r\n}\r\n\r\nexport function getMovieIndexByTitle(MOVIES_IN_LIST, query) {\r\n  const index = MOVIES_IN_LIST.map(movie => movie.title).indexOf(query);\r\n\r\n  if (!index) {\r\n    throw new Error('Movie not found');\r\n  }\r\n\r\n  const { title, id } = MOVIES_IN_LIST[index];\r\n  return { index, title, id };\r\n}"]}