{"version":3,"sources":["../../src/strategies/collaborativeFiltering.js"],"names":["predictWithCfUserBased","predictWithCfItemBased","getMatrices","ratingsGroupedByUser","ratingsGroupedByMovie","userId","userItem","matrix","movieIds","userIndex","matrixNormalized","meanNormalizeByRowVector","userRatingsRowVector","cosineSimilarityRowVector","predictedRatings","map","rating","movieIndex","movieId","movieRatingsRowVector","getMovieRatingsRowVector","score","getPredictedRating","itemUser","getUserRatingsRowVector","ratingsRowVector","N","neighborSelection","similarity","index","filter","value","sort","a","b","slice","numerator","reduce","result","denominator","pow","sqrt","itemBasedMatrix","itemRatings","userBasedMatrix","userRatings","rowVector","cell","getMean","valuesWithoutZeroes","length","mean","uId","Object","keys","getConditionalRating","push","primaryKey","secondaryKey"],"mappings":"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","file":"collaborativeFiltering.js","sourcesContent":["// Read https://buildingrecommenders.wordpress.com/2015/11/18/overview-of-recommender-algorithms-part-2/\r\n// Watch https://www.youtube.com/watch?v=h9gpufJFF-0\r\n// Read https://datascience.stackexchange.com/questions/2598/item-based-and-user-based-recommendation-difference-in-mahout\r\n\r\nimport math from 'mathjs';\r\n\r\nimport {\r\n  getCosineSimilarityRowVector,\r\n  sortByScore,\r\n} from './common';\r\n\r\nexport function predictWithCfUserBased(ratingsGroupedByUser, ratingsGroupedByMovie, userId) {\r\n  const { userItem } = getMatrices(ratingsGroupedByUser, ratingsGroupedByMovie, userId);\r\n  const { matrix, movieIds, userIndex } = userItem;\r\n\r\n  const matrixNormalized = meanNormalizeByRowVector(matrix);\r\n  const userRatingsRowVector = matrixNormalized[userIndex];\r\n\r\n  const cosineSimilarityRowVector = getCosineSimilarityRowVector(matrixNormalized, userIndex);\r\n\r\n  const predictedRatings = userRatingsRowVector.map((rating, movieIndex) => {\r\n    const movieId = movieIds[movieIndex];\r\n\r\n    const movieRatingsRowVector = getMovieRatingsRowVector(matrixNormalized, movieIndex);\r\n\r\n    let score;\r\n    if (rating === 0) {\r\n      score = getPredictedRating(movieRatingsRowVector, cosineSimilarityRowVector);\r\n    } else {\r\n      score = rating\r\n    }\r\n\r\n    return { score, movieId };\r\n  });\r\n\r\n  return sortByScore(predictedRatings);\r\n}\r\n\r\nexport function predictWithCfItemBased(ratingsGroupedByUser, ratingsGroupedByMovie, userId) {\r\n  const { itemUser } = getMatrices(ratingsGroupedByUser, ratingsGroupedByMovie, userId);\r\n  const { matrix, movieIds, userIndex } = itemUser;\r\n\r\n  const matrixNormalized = meanNormalizeByRowVector(matrix);\r\n  const userRatingsRowVector = getUserRatingsRowVector(matrixNormalized, userIndex);\r\n\r\n  const predictedRatings = userRatingsRowVector.map((rating, movieIndex) => {\r\n    const movieId = movieIds[movieIndex];\r\n\r\n    const cosineSimilarityRowVector = getCosineSimilarityRowVector(matrixNormalized, movieIndex);\r\n\r\n    let score;\r\n    if (rating === 0) {\r\n      score = getPredictedRating(\r\n        userRatingsRowVector,\r\n        cosineSimilarityRowVector\r\n      );\r\n    } else {\r\n      score = rating;\r\n    }\r\n\r\n    return { score, movieId };\r\n  });\r\n\r\n  return sortByScore(predictedRatings);\r\n}\r\n\r\nfunction getPredictedRating(ratingsRowVector, cosineSimilarityRowVector) {\r\n  const N = 5;\r\n  const neighborSelection = cosineSimilarityRowVector\r\n    // keep track of rating and similarity\r\n    .map((similarity, index) => ({ similarity, rating: ratingsRowVector[index] }))\r\n    // only neighbors with a rating\r\n    .filter(value => value.rating !== 0)\r\n    // most similar neighbors on top\r\n    .sort((a, b) => b.similarity - a.similarity)\r\n    // N neighbors\r\n    .slice(0, N);\r\n\r\n  const numerator = neighborSelection.reduce((result, value) => {\r\n    return result + value.similarity * value.rating;\r\n  }, 0);\r\n\r\n  const denominator = neighborSelection.reduce((result, value) => {\r\n    return result + math.pow(value.similarity, 2);\r\n  }, 0);\r\n\r\n  return numerator / math.sqrt(denominator);\r\n}\r\n\r\nfunction getUserRatingsRowVector(itemBasedMatrix, userIndex) {\r\n  return itemBasedMatrix.map(itemRatings => {\r\n    return itemRatings[userIndex];\r\n  });\r\n}\r\n\r\nfunction getMovieRatingsRowVector(userBasedMatrix, movieIndex) {\r\n  return userBasedMatrix.map(userRatings => {\r\n    return userRatings[movieIndex];\r\n  });\r\n}\r\n\r\nfunction meanNormalizeByRowVector(matrix) {\r\n  return matrix.map((rowVector) => {\r\n    return rowVector.map(cell => {\r\n      return cell !== 0 ? cell - getMean(rowVector) : cell;\r\n    });\r\n  });\r\n}\r\n\r\nfunction getMean(rowVector) {\r\n  const valuesWithoutZeroes = rowVector.filter(cell => cell !== 0);\r\n  return valuesWithoutZeroes.length ? math.mean(valuesWithoutZeroes) : 0;\r\n}\r\n\r\nexport function getMatrices(ratingsGroupedByUser, ratingsGroupedByMovie, uId) {\r\n  const itemUser = Object.keys(ratingsGroupedByMovie).reduce((result, movieId) => {\r\n    const rowVector = Object.keys(ratingsGroupedByUser).map((userId, userIndex) => {\r\n\r\n      if (userId == uId) {\r\n        result.userIndex = userIndex;\r\n      }\r\n\r\n      return getConditionalRating(ratingsGroupedByMovie, movieId, userId);\r\n    });\r\n\r\n    result.matrix.push(rowVector);\r\n    result.movieIds.push(movieId);\r\n\r\n    return result;\r\n  }, { matrix: [], movieIds: [], userIndex: null });\r\n\r\n  const userItem = Object.keys(ratingsGroupedByUser).reduce((result, userId, userIndex) => {\r\n    const rowVector = Object.keys(ratingsGroupedByMovie).map(movieId => {\r\n      return getConditionalRating(ratingsGroupedByUser, userId, movieId);\r\n    });\r\n\r\n    result.matrix.push(rowVector);\r\n\r\n    if (userId == uId) {\r\n      result.userIndex = userIndex;\r\n    }\r\n\r\n    return result;\r\n  }, { matrix: [], movieIds: Object.keys(ratingsGroupedByMovie), userIndex: null });\r\n\r\n  return { itemUser, userItem };\r\n}\r\n\r\nfunction getConditionalRating(value, primaryKey, secondaryKey) {\r\n  if (!value[primaryKey]) {\r\n    return 0;\r\n  }\r\n\r\n  if (!value[primaryKey][secondaryKey]) {\r\n    return 0;\r\n  }\r\n\r\n  return value[primaryKey][secondaryKey].rating;\r\n}"]}