{"version":3,"sources":["../../src/strategies/contentBased.js"],"names":["predictWithContentBased","X","MOVIES_IN_LIST","title","index","cosineSimilarityRowVector","contentBasedRecommendation","map","value","key","score","movieId","id"],"mappings":";;;;;;AAAA;;AAEA,SAASA,uBAAT,CAAiCC,CAAjC,EAAoCC,cAApC,EAAoDC,KAApD,EAA2D;AAAA,8BACvC,kCAAqBD,cAArB,EAAqCC,KAArC,CADuC;AAAA,MACjDC,KADiD,yBACjDA,KADiD;;AAGzD;;;AACA,MAAMC,4BAA4B,0CAA6BJ,CAA7B,EAAgCG,KAAhC,CAAlC;;AAEA;AACA;AACA,MAAME,6BAA6BD,0BAChCE,GADgC,CAC5B,UAACC,KAAD,EAAQC,GAAR;AAAA,WAAiB;AACpBC,aAAOF,KADa;AAEpBG,eAAST,eAAeO,GAAf,EAAoBG;AAFT,KAAjB;AAAA,GAD4B,CAAnC;;AAMA,SAAO,yBAAYN,0BAAZ,CAAP;AACD;;kBAEcN,uB","file":"contentBased.js","sourcesContent":["import { getCosineSimilarityRowVector, sortByScore, getMovieIndexByTitle } from './common';\r\n\r\nfunction predictWithContentBased(X, MOVIES_IN_LIST, title) {\r\n  const { index } = getMovieIndexByTitle(MOVIES_IN_LIST, title);\r\n\r\n  // Compute similarities based on input movie\r\n  const cosineSimilarityRowVector = getCosineSimilarityRowVector(X, index);\r\n\r\n  // Enrich the vector to convey all information\r\n  // Use references from before which we kept track of\r\n  const contentBasedRecommendation = cosineSimilarityRowVector\r\n    .map((value, key) => ({\r\n      score: value,\r\n      movieId: MOVIES_IN_LIST[key].id,\r\n    }));\r\n\r\n  return sortByScore(contentBasedRecommendation);\r\n}\r\n\r\nexport default predictWithContentBased;"]}